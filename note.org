#+title: Notes
#+author: Kazure Zheng

* HTML/CSS Intro

** HTML

Hypertext Markup Language

HTML = Nested Boxes

#+begin_src html
  <!DOCTYPE html>
  <html>
    <head>
      <title>Title!</title>
    </head>
    <body>
      <h1>Heading</h1>
      <p>paragraph</p>
    </body>
  </html>
#+end_src

*** tag
opening and closing tag, with ~<tagname>~ and ~</tagname>~


*** attribute

in the opening tag. 
#+begin_src html
  <div att="attribute01">This is a attributions</div>
#+end_src

*** image

#+begin_src html
  <img alt="alternative" src="path" />
#+end_src

- ~alt~: sometimes, browser won't display the correct image. So you need to add alternative name, so that it will display as a word at least. 
- self-closing: nobody will put anything in the image
  
*** list

- ~ul~ is unordered list.
- ~ol~ is ordered list. 
- ~li~ is item.

#+begin_src html
  <ul>
    <li>list1</li>
    <li>list2</li>
  </ul>

  <ol>
    <li>list1</li>
    <li>list2</li>
  </ol>
#+end_src


*** div & span

groups block section

groups an inline section

** CSS

*** hello
Cascading Style Sheet

#+begin_src css
  div {
      color: red;
      font-family: Arial;
      font-size: 24pt;
  }
#+end_src

*** attribute and class

In html, there is attribute and class.

#+begin_src html
  <div class="abc">This is the class</div>

  <div id="efg">This is the id</div>
#+end_src

In CSS, you can do like:

#+begin_src css
  .abc {
      /* This for class */
      color: red;
      font-family: Arial;
      font-size: 24pt;
  }

  #efg {
      /* This is for id */
      color: blue;
      font-family: Arial;
      font-size: 24pt;    
  }
#+end_src

*NOTICE*: every element can only have one ID and multiple class

*** link stylesheet

#+begin_src css
  <link rel="stylesheet" href="style.css" />  
#+end_src

- *RELation*: it speaks the relation between document and the resources.
- *Hyretext REFerence*: it speaks the position of resources.


* Intro JS

** call the console in firefox

~Ctrl+Shift+J~  

** Types

basic types and
- boolean
- any
- undefined

** operater

#+begin_src javascript
  2 === 2   // true
  2 === "2" // flase
  2 == "2"  // true !!!
#+end_src

it use triple equal to compare. 

** defining variables

#+begin_src javascript
  let myBoolean = true
#+end_src

use ~let~ not ~var~
- ~let~ is block-scoped
- ~var~ is function-scoped. 
  
** convention

use =camelCase=

** output

console.log()

print out in the consoled

#+begin_src javascript
  const a = 5;
  const b = 10;
  console.log(`a * b = ${a * b}`);
#+end_src

** alert

#+begin_src javascript
  alert("Congratulations!");
#+end_src

it generates a pop-up  notifications. 

** arrays

#+begin_src javascript
  let pets = ["flower", 42, false];

  pets.pop(); // remove from end

  pets.push("rabbit"); // add to the end
#+end_src

** loop

#+begin_src javascript
  let pets = ["flower", 42, false];

  for (const animal of pets) {
    const phrase = "I love my" + animal;
    console.log(phrase);
  }
#+end_src

** objects

#+begin_src javascript
  const myCar = {
    make: "Ford",
    year : 2005
  };

  console.log(myCar.make);
  console.log(myCar["year"]);

  const make = myCar.make;
  ocnst year = myCar.model; 
  const {make, year} = myCar;
#+end_src


** equality for array

#+begin_src javascript
  let arr1 = [1, 2, 3];
  let arr2 = [1, 2, 3];

  arr1 === arr2;  // false!!!
#+end_src


~===~ is comparing the address of arrays. 

** copy array

#+begin_src javascript
  let arr = [1, 2, 3];
  let copyArr = [...arr];
#+end_src

** function

#+begin_src javascript
  const functionName = (variables) => {
    // ...
    return 0;
  };
#+end_src

** [[https://www.jschallenger.com/javascript-practice][JS Practice]]

