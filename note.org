#+title: Notes
#+author: Kazure Zheng
* DAY 1
** HTML/CSS Intro

*** HTML

Hypertext Markup Language

HTML = Nested Boxes

#+begin_src html
  <!DOCTYPE html>
  <html>
    <head>
      <title>Title!</title>
    </head>
    <body>
      <h1>Heading</h1>
      <p>paragraph</p>
    </body>
  </html>
#+end_src

**** tag
opening and closing tag, with ~<tagname>~ and ~</tagname>~


**** attribute

in the opening tag. 
#+begin_src html
  <div att="attribute01">This is a attributions</div>
#+end_src

**** image

#+begin_src html
  <img alt="alternative" src="path" />
#+end_src

- ~alt~: sometimes, browser won't display the correct image. So you need to add alternative name, so that it will display as a word at least. 
- self-closing: nobody will put anything in the image
  
**** list

- ~ul~ is unordered list.
- ~ol~ is ordered list. 
- ~li~ is item.

#+begin_src html
  <ul>
    <li>list1</li>
    <li>list2</li>
  </ul>

  <ol>
    <li>list1</li>
    <li>list2</li>
  </ol>
#+end_src


**** div & span

groups block section

groups an inline section

*** CSS

**** hello
Cascading Style Sheet

#+begin_src css
  div {
      color: red;
      font-family: Arial;
      font-size: 24pt;
  }
#+end_src

**** attribute and class

In html, there is attribute and class.

#+begin_src html
  <div class="abc">This is the class</div>

  <div id="efg">This is the id</div>
#+end_src

In CSS, you can do like:

#+begin_src css
  .abc {
      /* This for class */
      color: red;
      font-family: Arial;
      font-size: 24pt;
  }

  #efg {
      /* This is for id */
      color: blue;
      font-family: Arial;
      font-size: 24pt;    
  }
#+end_src

*NOTICE*: every element can only have one ID and multiple class

**** link stylesheet

#+begin_src css
  <link rel="stylesheet" href="style.css" />  
#+end_src

- *RELation*: it speaks the relation between document and the resources.
- *Hyretext REFerence*: it speaks the position of resources.


** Intro JS

*** call the console in firefox

~Ctrl+Shift+J~  

*** Types

basic types and
- boolean
- any
- undefined

*** operater

#+begin_src javascript
  2 === 2   // true
  2 === "2" // flase
  2 == "2"  // true !!!
#+end_src

it use triple equal to compare. 

*** defining variables

#+begin_src javascript
  let myBoolean = true
#+end_src

use ~let~ not ~var~
- ~let~ is block-scoped
- ~var~ is function-scoped. 
  
*** convention

use =camelCase=

*** output

console.log()

print out in the consoled

#+begin_src javascript
  const a = 5;
  const b = 10;
  console.log(`a * b = ${a * b}`);
#+end_src

*** alert

#+begin_src javascript
  alert("Congratulations!");
#+end_src

it generates a pop-up  notifications. 

*** arrays

#+begin_src javascript
  let pets = ["flower", 42, false];

  pets.pop(); // remove from end

  pets.push("rabbit"); // add to the end
#+end_src

*** loop

#+begin_src javascript
  let pets = ["flower", 42, false];

  for (const animal of pets) {
    const phrase = "I love my" + animal;
    console.log(phrase);
  }
#+end_src

*** objects

#+begin_src javascript
  const myCar = {
    make: "Ford",
    year : 2005
  };

  console.log(myCar.make);
  console.log(myCar["year"]);

  const make = myCar.make;
  ocnst year = myCar.model; 
  const {make, year} = myCar;
#+end_src


*** equality for array

#+begin_src javascript
  let arr1 = [1, 2, 3];
  let arr2 = [1, 2, 3];

  arr1 === arr2;  // false!!!
#+end_src


~===~ is comparing the address of arrays. 

*** copy array

#+begin_src javascript
  let arr = [1, 2, 3];
  let copyArr = [...arr];
#+end_src

*** function

#+begin_src javascript
  const functionName = (variables) => {
    // ...
    return 0;
  };
#+end_src

*** [[https://www.jschallenger.com/javascript-practice][JS Practice]]

* DAY 2

** Advanced JS: Arrays and Callbacks

*** Practice
#+begin_src javascript
  let tempC = [1, 2];

  const CToF = (tempC) => {
    let tempF = tempC;
    for (temp of tempF) {
      temp = temp * 9/5 +32;
    }
    
    return tempF;
  };

  let tempF = CToF(tempC);

  console.log(tempF);
#+end_src

*** callback function

#+begin_src javascript
  const modifyArr = (arr, transformFunc) => {
    modifiedArr = [];

    for (i=0; i<arr.length; i++) {
      tmp = transformFunc(arr[i]);
      modifiedArr.push(tmp);
    }

    return modifiedArr;
  }
#+end_src

*** function shorten

#+begin_src javascript
  (arr) => (output)
#+end_src

it directly return the output. 

*** map practice

#+begin_src javascript
  const myArr = [1, 2, 3, 4, 5];

  const newArr = myArr.map( (num) => (num * 3));
#+end_src

*** filter

#+begin_src javascript
  let values = [1, 0, -1];
  let posValues = values.filter(x => x>0);
#+end_src

** Intro to React

*** Basic concept
you can customize tags to be components of a website interface.

reusibility is very important.
generalize the components first then render it.

- props: immutable. 
- state: mutable, it should be some dynamic components, like replies. 

*** store state

#+begin_src javascript
  import React, { useState } from 'react';

  const test = (props) => {
    const [catHappiness, setC]
    const [controlValue, setControlValue] = useState(defaultValue)
  }

#+end_src

*** onclick
#+begin_src javascript
  return (
      <button>
      onClick={() => {
        setControlValue(initialValue);
      }}>
      {controlFunction}
    </button>

  );
#+end_src


*** Practice

**** CommentReply.js

#+begin_src js
  import React, { useState } from 'react';

  const CommentReply = (props) => {
    // function logic

    // initialize isLiked to false
    // declares setIsLiked as the function to update isLiked.
    const [isLiked, setIsLiked] = useState(false)
    
    
    return (
      // what you want to render

      /* example
      <div className="comment-text">
        <h5>Joyce Yoon</h5>
        <p>woww peak preschool energy</p>
      </div>
      ,*/

      <div className="comment-text">
        <h5>{props.name}</h5>
        <p>{props.content}</p>
        <p>{isLiked ? "Liked" : "like"}</p>
      </div>
      
    );
  };

  export default CommentReply;
#+end_src


- ~()~ allows us to write JSX("HTML") code inside JavaScript.
- ~{}~ allows us to return to JavaScript inside the JSX environment.

In a word, you can write "HTML" in ~()~ of JavaScript and write JavaScript in ~{}~ inside ~()~ of JavaScript. 


**** code facebook

***** App.js
#+begin_src js
  /*
    app
    navbar, intro, photos, post
  ,*/

  import React from "react";
  import NavBar from "./NavBar";
  import Photos from "./Photos";
  import Intro from "./Intro";
  import Post from "./Post";

  const App = () => {
    return (
      <div>
        <NavBar />
        <div>
          <Intro />
          <Photos />
        </div>
        <Post />
      </div>
    );
  };

  export default App;
#+end_src


***** Intro.js
#+begin_src js
  import React from "react";

  const Intro = (props) => {
    return (
      <div>
        <p>
          Studies t <b>{props.education}</b>
        </p>
        <p>
          From <b>{props.city}</b>
        </p>
      </div>
    );
  };

  export default Intro;
#+end_src


***** Photos.js
#+begin_src js
  import React from "react";

  const Photos = (props) => {

    const myImageTags = props.links.map((photoLink) => {
      return <img alt="" src={photoLink} />;
    });

    return (
      <div>
        <h3>Photos</h3>
        {myImageTags}
      </div>
    );
  };

  export default Photos; 
#+end_src


***** Post.js

#+begin_src js
  import React, { useState } from "react";

  const Post = (props) => {
    const [isLiked, setIsLiked] = useState(false);
    
    return (
      <div className="post">
        <h3>{props.name}</h3>
        <p>{props.text}</p>
        <button>
          onClick={() => {
            setIsLiked(!isLiked);
          }}>
          {isLiked ? "Liked" : "Like"}
        </button>
      </div>
    );
  };

  export default Post;
#+end_src


** React Lifecycle and Hooks


*** state
#+begin_src js
  buyDog = () => {
    setPets([...pets, "dog"])  // keep the previous value
  }
#+end_src

*** share state
You can not share state between children components.

1. move it into parent
2. pass value and setter down to children as props

*** useState is not enough

#+begin_src js
  testingStuff = () => {
    setPersons([...persons, "me"]);
    console.log(persons);
  }
#+end_src

it will print out ~[]~, because the setSatate will not run immediately or so fast before next command.

You should use ~useEffect()~

#+begin_src js
  useEffect(() => {
    console.log(persons);
  }, [persons])
#+end_src
*** useEffect() hook

- runs after specific value changed
- used to synchronize with something external to React.

#+begin_src js
  const myFunciton  = () => {
    // ...

    return () => {
      /*
        run when the component dismounts
      ,*/
      
    }
  }

  useEffect(myFunction, [var1, var2])  // run when var1 or var2 changed

  useEffect(myFunction, []) // only run for the first time

  useEffect(myFunction) // call the at every render
#+end_src
*** write html in jsx
#+begin_src js
  const header = <h1>i love nicholas tsao</h1>;

  return (
      <div>
      {header}
    </div>
  )
#+end_src
*** render data in array

#+begin_src js
  const data = [
    { id: 0, text: "hello"},
    { id: 1, text: "world"}
  ];
  return data.map((item) => {
    return <div key={item.id}>{item.text }</div>
  })
#+end_src
*** React Component

#+begin_src js
  const Button = () => {
    const [hasBeenClicked, setHasBeenClicked] =useState(false)

    useEffect(() => {
      if (hasBeenClicked) {
        console.log("Button has been clicked!");
      }
    }, [hasBeenClicked]);

    return <button onClick={() => setHasBeenClicked(true)}>Click me!</button>
  }
#+end_src
*** React Component Trees

#+begin_src js
  import {Button} from "....";

  const Form = () => {
    return (
        <div>
        <input>Click the button blow</input>
        <Button />
        </div>
    )
  }
#+end_src

the tree only contain form and button.
it will ignore all html element.

*** component's lifecycle

1. mounting
2. updating
3. dismounting

*** create a blank React app

#+begin_src sh
  npm create vite@latest
#+end_src
